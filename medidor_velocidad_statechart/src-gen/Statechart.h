/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Statechart state machine.
*/
typedef struct Statechart Statechart;

/*!
* Forward declaration of the data structure for the StatechartIface interface scope.
*/
typedef struct StatechartIface StatechartIface;

/*!
* Forward declaration of the data structure for the StatechartIfaceBoton interface scope.
*/
typedef struct StatechartIfaceBoton StatechartIfaceBoton;

/*!
* Forward declaration of the data structure for the StatechartInternal interface scope.
*/
typedef struct StatechartInternal StatechartInternal;

/*!
* Forward declaration of the data structure for the StatechartTimeEvents interface scope.
*/
typedef struct StatechartTimeEvents StatechartTimeEvents;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'Statechart'.
*/

#ifndef STATECHART_EVENTQUEUE_BUFFERSIZE
#define STATECHART_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef STATECHART_IN_EVENTQUEUE_BUFFERSIZE
#define STATECHART_IN_EVENTQUEUE_BUFFERSIZE STATECHART_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define STATECHART_STATE_COUNT 7

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATECHART_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define STATECHART_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_STATECHART_MAIN_REGION_MEDICION 0
#define SCVI_STATECHART_MAIN_REGION_REPOSO 0
#define SCVI_STATECHART_MAIN_REGION_DISPLAY_ENCENDIDO 0
#define SCVI_STATECHART_MAIN_REGION_DISPLAY_ENCENDIDO_R1_LED3 0
#define SCVI_STATECHART_MAIN_REGION_DISPLAY_ENCENDIDO_R1_LED4 0
#define SCVI_STATECHART_MAIN_REGION_DISPLAY_ENCENDIDO_R1_LED1 0
#define SCVI_STATECHART_MAIN_REGION_DISPLAY_ENCENDIDO_R1_LED2 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	Statechart_invalid_event = SC_INVALID_EVENT_VALUE,
	Statechart_paso_el_auto,
	Statechart_boton_reinicio_pressed,
	Statechart_boton_velocidad_pressed,
	Statechart_boton_tiempo_total_pressed,
	Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_time_event_0,
	Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_time_event_0,
	Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_time_event_0,
	Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_time_event_0
} StatechartEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	StatechartEventID name;
} statechart_event;

/*
 * Queue that holds the raised events.
 */
typedef struct statechart_eventqueue_s {
	statechart_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} statechart_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Statechart_last_state,
	Statechart_main_region_MEDICION,
	Statechart_main_region_REPOSO,
	Statechart_main_region_DISPLAY_ENCENDIDO,
	Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3,
	Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4,
	Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1,
	Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2
} StatechartStates;


/*! Type declaration of the data structure for the StatechartIface interface scope. */
struct StatechartIface
{
	sc_boolean paso_el_auto_raised;
	sc_integer cantidad_vueltas;
	sc_integer total_vueltas;
};



/*! Type declaration of the data structure for the StatechartIfaceBoton interface scope. */
struct StatechartIfaceBoton
{
	sc_boolean reinicio_pressed_raised;
	sc_boolean velocidad_pressed_raised;
	sc_boolean tiempo_total_pressed_raised;
};



/*! Type declaration of the data structure for the StatechartInternal interface scope. */
struct StatechartInternal
{
	sc_integer ton;
};



/*! Type declaration of the data structure for the StatechartTimeEvents interface scope. */
struct StatechartTimeEvents
{
	sc_boolean statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised;
	sc_boolean statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised;
	sc_boolean statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised;
	sc_boolean statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Statechart state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Statechart
{
	StatechartStates stateConfVector[STATECHART_MAX_ORTHOGONAL_STATES];
	StatechartIface iface;
	StatechartIfaceBoton ifaceBoton;
	StatechartInternal internal;
	StatechartTimeEvents timeEvents;
	sc_boolean completed;
	sc_boolean doCompletion;
	sc_boolean isExecuting;
	statechart_eventqueue in_event_queue;
	statechart_event in_buffer[STATECHART_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Statechart state machine data structures. Must be called before first usage.*/
extern void statechart_init(Statechart* handle);


/*! Activates the state machine. */
extern void statechart_enter(Statechart* handle);

/*! Deactivates the state machine. */
extern void statechart_exit(Statechart* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void statechart_trigger_without_event(Statechart* handle);


/*! Raises a time event. */
extern void statechart_raise_time_event(Statechart* handle, sc_eventid evid);

/*! Raises the in event 'paso_el_auto' that is defined in the default interface scope. */ 
extern void statechart_raise_paso_el_auto(Statechart* handle);
/*! Gets the value of the variable 'cantidad_vueltas' that is defined in the default interface scope. */ 
extern sc_integer statechart_get_cantidad_vueltas(const Statechart* handle);
/*! Sets the value of the variable 'cantidad_vueltas' that is defined in the default interface scope. */ 
extern void statechart_set_cantidad_vueltas(Statechart* handle, sc_integer value);
/*! Gets the value of the variable 'total_vueltas' that is defined in the default interface scope. */ 
extern sc_integer statechart_get_total_vueltas(const Statechart* handle);
/*! Sets the value of the variable 'total_vueltas' that is defined in the default interface scope. */ 
extern void statechart_set_total_vueltas(Statechart* handle, sc_integer value);
/*! Raises the in event 'reinicio_pressed' that is defined in the interface scope 'boton'. */ 
extern void statechart_boton_raise_reinicio_pressed(Statechart* handle);
/*! Raises the in event 'velocidad_pressed' that is defined in the interface scope 'boton'. */ 
extern void statechart_boton_raise_velocidad_pressed(Statechart* handle);
/*! Raises the in event 'tiempo_total_pressed' that is defined in the interface scope 'boton'. */ 
extern void statechart_boton_raise_tiempo_total_pressed(Statechart* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean statechart_is_active(const Statechart* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean statechart_is_final(const Statechart* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean statechart_is_state_active(const Statechart* handle, StatechartStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATECHART_H_ */
