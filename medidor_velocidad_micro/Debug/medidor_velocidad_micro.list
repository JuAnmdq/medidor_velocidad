
medidor_velocidad_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039e8  080039e8  000049e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039f8  080039f8  000049f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a04  08003a04  00004a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003a08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          00000124  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7ef  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000195b  00000000  00000000  0000f82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  00011190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096e  00000000  00000000  00011dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207b1  00000000  00000000  00012746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1eb  00000000  00000000  00032ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ae6  00000000  00000000  0003e0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107bc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033e4  00000000  00000000  00107c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0010aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039d0 	.word	0x080039d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080039d0 	.word	0x080039d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <statechart_init>:
static sc_boolean statechart_dispatch_next_event(Statechart* handle);
static StatechartEventID statechart_get_timed_event_name(Statechart* handle, sc_eventid evid);


void statechart_init(Statechart* handle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	sc_integer i;
	
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e007      	b.n	8000512 <statechart_init+0x1e>
	{
		handle->stateConfVector[i] = Statechart_last_state;
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b00      	cmp	r3, #0
 8000516:	ddf4      	ble.n	8000502 <statechart_init+0xe>
	}
	
				
	clear_in_events(handle);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f870 	bl	80005fe <clear_in_events>
	
	
	/* Default init sequence for statechart Statechart */
	statechart_set_cantidad_vueltas(handle, 0);
 800051e:	2100      	movs	r1, #0
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f926 	bl	8000772 <statechart_set_cantidad_vueltas>
	statechart_set_total_vueltas(handle, 4);
 8000526:	2104      	movs	r1, #4
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f93c 	bl	80007a6 <statechart_set_total_vueltas>
	statechart_internal_set_ton(handle, 5);
 800052e:	2105      	movs	r1, #5
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f979 	bl	8000828 <statechart_internal_set_ton>
	
	handle->isExecuting = bool_false;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	779a      	strb	r2, [r3, #30]
	statechart_eventqueue_init(&handle->in_event_queue, handle->in_buffer, STATECHART_IN_EVENTQUEUE_BUFFERSIZE);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f103 0020 	add.w	r0, r3, #32
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3334      	adds	r3, #52	@ 0x34
 8000546:	2214      	movs	r2, #20
 8000548:	4619      	mov	r1, r3
 800054a:	f000 fc8e 	bl	8000e6a <statechart_eventqueue_init>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <statechart_enter>:

void statechart_enter(Statechart* handle)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7f9b      	ldrb	r3, [r3, #30]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d123      	bne.n	80005ae <statechart_enter+0x58>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2201      	movs	r2, #1
 800056a:	779a      	strb	r2, [r3, #30]
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default(handle);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 fa5f 	bl	8000a30 <enseq_main_region_default>
	handle->doCompletion = bool_false;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	775a      	strb	r2, [r3, #29]
	do
	{ 
		if (handle->completed == bool_true)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7f1b      	ldrb	r3, [r3, #28]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <statechart_enter+0x30>
		{ 
			handle->doCompletion = bool_true;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2201      	movs	r2, #1
 8000584:	775a      	strb	r2, [r3, #29]
		} 
		handle->completed = bool_false;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	771a      	strb	r2, [r3, #28]
		micro_step(handle);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f859 	bl	8000644 <micro_step>
		clear_in_events(handle);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f833 	bl	80005fe <clear_in_events>
		handle->doCompletion = bool_false;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	775a      	strb	r2, [r3, #29]
	} while (handle->completed == bool_true);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7f1b      	ldrb	r3, [r3, #28]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e8      	bne.n	8000578 <statechart_enter+0x22>
	handle->isExecuting = bool_false;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	779a      	strb	r2, [r3, #30]
 80005ac:	e000      	b.n	80005b0 <statechart_enter+0x5a>
		return;
 80005ae:	bf00      	nop
}
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <statechart_raise_time_event>:
	SC_UNUSED(handle);
	return bool_false;
}

void statechart_raise_time_event(Statechart* handle, sc_eventid evid)
{
 80005b6:	b590      	push	{r4, r7, lr}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3318      	adds	r3, #24
 80005c4:	461a      	mov	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dc14      	bgt.n	80005f6 <statechart_raise_time_event+0x40>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(StatechartTimeEvents))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3318      	adds	r3, #24
 80005d0:	1d1a      	adds	r2, r3, #4
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d90e      	bls.n	80005f6 <statechart_raise_time_event+0x40>
	{
		statechart_add_event_to_queue(&(handle->in_event_queue), statechart_get_timed_event_name(handle, evid));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 0420 	add.w	r4, r3, #32
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 fd6f 	bl	80010c4 <statechart_get_timed_event_name>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4619      	mov	r1, r3
 80005ea:	4620      	mov	r0, r4
 80005ec:	f000 fcd5 	bl	8000f9a <statechart_add_event_to_queue>
		run_cycle(handle);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f86b 	bl	80006cc <run_cycle>
	}
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <clear_in_events>:
		}
		return result;
	}

static void clear_in_events(Statechart* handle)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	handle->iface.paso_el_auto_raised = bool_false;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	711a      	strb	r2, [r3, #4]
	handle->ifaceBoton.reinicio_pressed_raised = bool_false;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	741a      	strb	r2, [r3, #16]
	handle->ifaceBoton.velocidad_pressed_raised = bool_false;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	745a      	strb	r2, [r3, #17]
	handle->ifaceBoton.tiempo_total_pressed_raised = bool_false;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	749a      	strb	r2, [r3, #18]
	handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised = bool_false;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
	handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised = bool_false;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	765a      	strb	r2, [r3, #25]
	handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised = bool_false;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	769a      	strb	r2, [r3, #26]
	handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised = bool_false;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	76da      	strb	r2, [r3, #27]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <micro_step>:

static void micro_step(Statechart* handle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	switch(handle->stateConfVector[ 0 ])
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	2b06      	cmp	r3, #6
 8000654:	d834      	bhi.n	80006c0 <micro_step+0x7c>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <micro_step+0x18>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000679 	.word	0x08000679
 8000660:	08000685 	.word	0x08000685
 8000664:	080006c1 	.word	0x080006c1
 8000668:	08000691 	.word	0x08000691
 800066c:	0800069d 	.word	0x0800069d
 8000670:	080006a9 	.word	0x080006a9
 8000674:	080006b5 	.word	0x080006b5
	{
		case Statechart_main_region_MEDICION :
		{
			main_region_MEDICION_react(handle,-1);
 8000678:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fa81 	bl	8000b84 <main_region_MEDICION_react>
			break;
 8000682:	e01e      	b.n	80006c2 <micro_step+0x7e>
		}
		case Statechart_main_region_REPOSO :
		{
			main_region_REPOSO_react(handle,-1);
 8000684:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fa94 	bl	8000bb6 <main_region_REPOSO_react>
			break;
 800068e:	e018      	b.n	80006c2 <micro_step+0x7e>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3 :
		{
			main_region_DISPLAY_ENCENDIDO_r1_LED3_react(handle,-1);
 8000690:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 fb20 	bl	8000cda <main_region_DISPLAY_ENCENDIDO_r1_LED3_react>
			break;
 800069a:	e012      	b.n	80006c2 <micro_step+0x7e>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4 :
		{
			main_region_DISPLAY_ENCENDIDO_r1_LED4_react(handle,-1);
 800069c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fb4c 	bl	8000d3e <main_region_DISPLAY_ENCENDIDO_r1_LED4_react>
			break;
 80006a6:	e00c      	b.n	80006c2 <micro_step+0x7e>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1 :
		{
			main_region_DISPLAY_ENCENDIDO_r1_LED1_react(handle,-1);
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 fb78 	bl	8000da2 <main_region_DISPLAY_ENCENDIDO_r1_LED1_react>
			break;
 80006b2:	e006      	b.n	80006c2 <micro_step+0x7e>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2 :
		{
			main_region_DISPLAY_ENCENDIDO_r1_LED2_react(handle,-1);
 80006b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fba4 	bl	8000e06 <main_region_DISPLAY_ENCENDIDO_r1_LED2_react>
			break;
 80006be:	e000      	b.n	80006c2 <micro_step+0x7e>
		}
		default: 
			/* do nothing */
			break;
 80006c0:	bf00      	nop
	}
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop

080006cc <run_cycle>:

static void run_cycle(Statechart* handle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7f9b      	ldrb	r3, [r3, #30]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d129      	bne.n	8000730 <run_cycle+0x64>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	779a      	strb	r2, [r3, #30]
	statechart_dispatch_next_event(handle);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 fcda 	bl	800109c <statechart_dispatch_next_event>
	do
	{ 
		handle->doCompletion = bool_false;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	775a      	strb	r2, [r3, #29]
		do
		{ 
			if (handle->completed == bool_true)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7f1b      	ldrb	r3, [r3, #28]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <run_cycle+0x30>
			{ 
				handle->doCompletion = bool_true;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	775a      	strb	r2, [r3, #29]
			} 
			handle->completed = bool_false;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	771a      	strb	r2, [r3, #28]
			micro_step(handle);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff9e 	bl	8000644 <micro_step>
			clear_in_events(handle);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff78 	bl	80005fe <clear_in_events>
			handle->doCompletion = bool_false;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
		} while (handle->completed == bool_true);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7f1b      	ldrb	r3, [r3, #28]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1e8      	bne.n	80006ee <run_cycle+0x22>
	} while (statechart_dispatch_next_event(handle) == bool_true);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 fcbd 	bl	800109c <statechart_dispatch_next_event>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1df      	bne.n	80006e8 <run_cycle+0x1c>
	handle->isExecuting = bool_false;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	779a      	strb	r2, [r3, #30]
 800072e:	e000      	b.n	8000732 <run_cycle+0x66>
		return;
 8000730:	bf00      	nop
}
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <statechart_raise_paso_el_auto>:


void statechart_raise_paso_el_auto(Statechart* handle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_paso_el_auto);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3320      	adds	r3, #32
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fc27 	bl	8000f9a <statechart_add_event_to_queue>
	run_cycle(handle);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ffbd 	bl	80006cc <run_cycle>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <statechart_get_cantidad_vueltas>:



sc_integer statechart_get_cantidad_vueltas(const Statechart* handle)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	return handle->iface.cantidad_vueltas;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <statechart_set_cantidad_vueltas>:
void statechart_set_cantidad_vueltas(Statechart* handle, sc_integer value)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
	handle->iface.cantidad_vueltas = value;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	609a      	str	r2, [r3, #8]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <statechart_get_total_vueltas>:
sc_integer statechart_get_total_vueltas(const Statechart* handle)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	return handle->iface.total_vueltas;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <statechart_set_total_vueltas>:
void statechart_set_total_vueltas(Statechart* handle, sc_integer value)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
	handle->iface.total_vueltas = value;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	60da      	str	r2, [r3, #12]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <statechart_boton_raise_reinicio_pressed>:
void statechart_boton_raise_reinicio_pressed(Statechart* handle)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_boton_reinicio_pressed);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3320      	adds	r3, #32
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fbe2 	bl	8000f9a <statechart_add_event_to_queue>
	run_cycle(handle);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff78 	bl	80006cc <run_cycle>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <statechart_boton_raise_velocidad_pressed>:

void statechart_boton_raise_velocidad_pressed(Statechart* handle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_boton_velocidad_pressed);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3320      	adds	r3, #32
 80007f0:	2103      	movs	r1, #3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fbd1 	bl	8000f9a <statechart_add_event_to_queue>
	run_cycle(handle);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff67 	bl	80006cc <run_cycle>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <statechart_boton_raise_tiempo_total_pressed>:

void statechart_boton_raise_tiempo_total_pressed(Statechart* handle)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_boton_tiempo_total_pressed);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3320      	adds	r3, #32
 8000812:	2104      	movs	r1, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fbc0 	bl	8000f9a <statechart_add_event_to_queue>
	run_cycle(handle);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff56 	bl	80006cc <run_cycle>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <statechart_internal_set_ton>:




static void statechart_internal_set_ton(Statechart* handle, sc_integer value)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	handle->internal.ton = value;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	615a      	str	r2, [r3, #20]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <enact_main_region_MEDICION>:


/* implementations of all internal functions */

static void enact_main_region_MEDICION(Statechart* handle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'MEDICION'. */
	statechart_iniciar_timer(handle);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fe27 	bl	80014a0 <statechart_iniciar_timer>
	handle->completed = bool_true;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	771a      	strb	r2, [r3, #28]
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <enact_main_region_REPOSO>:

/* Entry action for state 'REPOSO'. */
static void enact_main_region_REPOSO(Statechart* handle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'REPOSO'. */
	statechart_set_cantidad_vueltas(handle, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff81 	bl	8000772 <statechart_set_cantidad_vueltas>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED3>:

/* Entry action for state 'LED3'. */
static void enact_main_region_DISPLAY_ENCENDIDO_r1_LED3(Statechart* handle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'LED3'. */
	statechart_set_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised) , ((sc_time) handle->internal.ton), bool_false);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f103 0118 	add.w	r1, r3, #24
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	2300      	movs	r3, #0
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 fedd 	bl	800164c <statechart_set_timer>
	statechart_prender_LED3(handle);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 ff46 	bl	8001724 <statechart_prender_LED3>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED4>:

/* Entry action for state 'LED4'. */
static void enact_main_region_DISPLAY_ENCENDIDO_r1_LED4(Statechart* handle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'LED4'. */
	statechart_set_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised) , ((sc_time) handle->internal.ton), bool_false);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f103 0119 	add.w	r1, r3, #25
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	2300      	movs	r3, #0
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 fec9 	bl	800164c <statechart_set_timer>
	statechart_prender_LED4(handle);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 ff4e 	bl	800175c <statechart_prender_LED4>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED1>:

/* Entry action for state 'LED1'. */
static void enact_main_region_DISPLAY_ENCENDIDO_r1_LED1(Statechart* handle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'LED1'. */
	statechart_set_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised) , ((sc_time) handle->internal.ton), bool_false);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f103 011a 	add.w	r1, r3, #26
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	2300      	movs	r3, #0
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 feb5 	bl	800164c <statechart_set_timer>
	statechart_prender_LED1(handle);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 fee6 	bl	80016b4 <statechart_prender_LED1>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED2>:

/* Entry action for state 'LED2'. */
static void enact_main_region_DISPLAY_ENCENDIDO_r1_LED2(Statechart* handle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'LED2'. */
	statechart_set_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised) , ((sc_time) handle->internal.ton), bool_false);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f103 011b 	add.w	r1, r3, #27
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	2300      	movs	r3, #0
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 fea1 	bl	800164c <statechart_set_timer>
	statechart_prender_LED2(handle);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 feee 	bl	80016ec <statechart_prender_LED2>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED3>:

/* Exit action for state 'LED3'. */
static void exact_main_region_DISPLAY_ENCENDIDO_r1_LED3(Statechart* handle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'LED3'. */
	statechart_unset_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised) );		
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3318      	adds	r3, #24
 8000924:	4619      	mov	r1, r3
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 feac 	bl	8001684 <statechart_unset_timer>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED4>:

/* Exit action for state 'LED4'. */
static void exact_main_region_DISPLAY_ENCENDIDO_r1_LED4(Statechart* handle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'LED4'. */
	statechart_unset_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised) );		
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3319      	adds	r3, #25
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fe9e 	bl	8001684 <statechart_unset_timer>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED1>:

/* Exit action for state 'LED1'. */
static void exact_main_region_DISPLAY_ENCENDIDO_r1_LED1(Statechart* handle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'LED1'. */
	statechart_unset_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised) );		
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	331a      	adds	r3, #26
 800095c:	4619      	mov	r1, r3
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fe90 	bl	8001684 <statechart_unset_timer>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <exact_main_region_DISPLAY_ENCENDIDO_r1_LED2>:

/* Exit action for state 'LED2'. */
static void exact_main_region_DISPLAY_ENCENDIDO_r1_LED2(Statechart* handle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'LED2'. */
	statechart_unset_timer(handle, (sc_eventid) &(handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised) );		
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	331b      	adds	r3, #27
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fe82 	bl	8001684 <statechart_unset_timer>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <enseq_main_region_MEDICION_default>:

/* 'default' enter sequence for state MEDICION */
static void enseq_main_region_MEDICION_default(Statechart* handle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state MEDICION */
	enact_main_region_MEDICION(handle);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff57 	bl	8000844 <enact_main_region_MEDICION>
	handle->stateConfVector[0] = Statechart_main_region_MEDICION;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <enseq_main_region_REPOSO_default>:

/* 'default' enter sequence for state REPOSO */
static void enseq_main_region_REPOSO_default(Statechart* handle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state REPOSO */
	enact_main_region_REPOSO(handle);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff57 	bl	8000860 <enact_main_region_REPOSO>
	handle->stateConfVector[0] = Statechart_main_region_REPOSO;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2202      	movs	r2, #2
 80009b6:	701a      	strb	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED3_default>:

/* 'default' enter sequence for state LED3 */
static void enseq_main_region_DISPLAY_ENCENDIDO_r1_LED3_default(Statechart* handle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state LED3 */
	enact_main_region_DISPLAY_ENCENDIDO_r1_LED3(handle);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff55 	bl	8000878 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED3>
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2204      	movs	r2, #4
 80009d2:	701a      	strb	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED4_default>:

/* 'default' enter sequence for state LED4 */
static void enseq_main_region_DISPLAY_ENCENDIDO_r1_LED4_default(Statechart* handle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state LED4 */
	enact_main_region_DISPLAY_ENCENDIDO_r1_LED4(handle);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff5b 	bl	80008a0 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED4>
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2205      	movs	r2, #5
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default>:

/* 'default' enter sequence for state LED1 */
static void enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default(Statechart* handle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state LED1 */
	enact_main_region_DISPLAY_ENCENDIDO_r1_LED1(handle);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff61 	bl	80008c8 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED1>
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2206      	movs	r2, #6
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED2_default>:

/* 'default' enter sequence for state LED2 */
static void enseq_main_region_DISPLAY_ENCENDIDO_r1_LED2_default(Statechart* handle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state LED2 */
	enact_main_region_DISPLAY_ENCENDIDO_r1_LED2(handle);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff67 	bl	80008f0 <enact_main_region_DISPLAY_ENCENDIDO_r1_LED2>
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2207      	movs	r2, #7
 8000a26:	701a      	strb	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <enseq_main_region_default>:

/* 'default' enter sequence for region main region */
static void enseq_main_region_default(Statechart* handle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default(handle);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f88d 	bl	8000b58 <react_main_region__entry_Default>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <enseq_main_region_DISPLAY_ENCENDIDO_r1_default>:

/* 'default' enter sequence for region r1 */
static void enseq_main_region_DISPLAY_ENCENDIDO_r1_default(Statechart* handle)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region r1 */
	react_main_region_DISPLAY_ENCENDIDO_r1__entry_Default(handle);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f88d 	bl	8000b6e <react_main_region_DISPLAY_ENCENDIDO_r1__entry_Default>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <exseq_main_region_REPOSO>:
	handle->stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state REPOSO */
static void exseq_main_region_REPOSO(Statechart* handle)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state REPOSO */
	handle->stateConfVector[0] = Statechart_last_state;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <exseq_main_region_DISPLAY_ENCENDIDO>:

/* Default exit sequence for state DISPLAY ENCENDIDO */
static void exseq_main_region_DISPLAY_ENCENDIDO(Statechart* handle)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state DISPLAY ENCENDIDO */
	exseq_main_region_DISPLAY_ENCENDIDO_r1(handle);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f840 	bl	8000b04 <exseq_main_region_DISPLAY_ENCENDIDO_r1>
	handle->stateConfVector[0] = Statechart_last_state;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3>:

/* Default exit sequence for state LED3 */
static void exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3(Statechart* handle)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state LED3 */
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	701a      	strb	r2, [r3, #0]
	exact_main_region_DISPLAY_ENCENDIDO_r1_LED3(handle);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff39 	bl	8000918 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED3>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4>:

/* Default exit sequence for state LED4 */
static void exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4(Statechart* handle)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state LED4 */
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	701a      	strb	r2, [r3, #0]
	exact_main_region_DISPLAY_ENCENDIDO_r1_LED4(handle);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff39 	bl	8000934 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED4>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1>:

/* Default exit sequence for state LED1 */
static void exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1(Statechart* handle)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state LED1 */
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	701a      	strb	r2, [r3, #0]
	exact_main_region_DISPLAY_ENCENDIDO_r1_LED1(handle);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff39 	bl	8000950 <exact_main_region_DISPLAY_ENCENDIDO_r1_LED1>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2>:

/* Default exit sequence for state LED2 */
static void exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2(Statechart* handle)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state LED2 */
	handle->stateConfVector[0] = Statechart_main_region_DISPLAY_ENCENDIDO;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	701a      	strb	r2, [r3, #0]
	exact_main_region_DISPLAY_ENCENDIDO_r1_LED2(handle);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff39 	bl	800096c <exact_main_region_DISPLAY_ENCENDIDO_r1_LED2>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <exseq_main_region_DISPLAY_ENCENDIDO_r1>:
	}
}

/* Default exit sequence for region r1 */
static void exseq_main_region_DISPLAY_ENCENDIDO_r1(Statechart* handle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Statechart.main_region.DISPLAY_ENCENDIDO.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3b04      	subs	r3, #4
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d81a      	bhi.n	8000b4c <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x48>
 8000b16:	a201      	add	r2, pc, #4	@ (adr r2, 8000b1c <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x18>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b35 	.word	0x08000b35
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b45 	.word	0x08000b45
	{
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3 :
		{
			exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3(handle);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ffb0 	bl	8000a92 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3>
			break;
 8000b32:	e00c      	b.n	8000b4e <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x4a>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4 :
		{
			exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4(handle);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffba 	bl	8000aae <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4>
			break;
 8000b3a:	e008      	b.n	8000b4e <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x4a>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1 :
		{
			exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1(handle);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffc4 	bl	8000aca <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1>
			break;
 8000b42:	e004      	b.n	8000b4e <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x4a>
		}
		case Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2 :
		{
			exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2(handle);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffce 	bl	8000ae6 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2>
			break;
 8000b4a:	e000      	b.n	8000b4e <exseq_main_region_DISPLAY_ENCENDIDO_r1+0x4a>
		}
		default: 
			/* do nothing */
			break;
 8000b4c:	bf00      	nop
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop

08000b58 <react_main_region__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(Statechart* handle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_main_region_REPOSO_default(handle);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff1f 	bl	80009a4 <enseq_main_region_REPOSO_default>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <react_main_region_DISPLAY_ENCENDIDO_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region_DISPLAY_ENCENDIDO_r1__entry_Default(Statechart* handle)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default(handle);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff3e 	bl	80009f8 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <main_region_MEDICION_react>:


static sc_integer main_region_MEDICION_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	/* The reactions of state MEDICION. */
 			sc_integer transitioned_after = transitioned_before;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7f5b      	ldrb	r3, [r3, #29]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <main_region_MEDICION_react+0x24>
	{ 
		/* Default exit sequence for state MEDICION */
		handle->stateConfVector[0] = Statechart_last_state;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
		/* 'default' enter sequence for state DISPLAY ENCENDIDO */
		enseq_main_region_DISPLAY_ENCENDIDO_r1_default(handle);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff50 	bl	8000a46 <enseq_main_region_DISPLAY_ENCENDIDO_r1_default>
 8000ba6:	e001      	b.n	8000bac <main_region_MEDICION_react+0x28>
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	60fb      	str	r3, [r7, #12]
	}
	return transitioned_after;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <main_region_REPOSO_react>:

static sc_integer main_region_REPOSO_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	/* The reactions of state REPOSO. */
 			sc_integer transitioned_after = transitioned_before;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7f5b      	ldrb	r3, [r3, #29]
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d014      	beq.n	8000bfc <main_region_REPOSO_react+0x46>
	{ 
		if ((transitioned_after) < (0))
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da0b      	bge.n	8000bf0 <main_region_REPOSO_react+0x3a>
		{ 
			if (handle->iface.paso_el_auto_raised == bool_true)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <main_region_REPOSO_react+0x3a>
			{ 
				exseq_main_region_REPOSO(handle);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff3b 	bl	8000a5c <exseq_main_region_REPOSO>
				enseq_main_region_MEDICION_default(handle);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fece 	bl	8000988 <enseq_main_region_MEDICION_default>
				transitioned_after = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d101      	bne.n	8000bfc <main_region_REPOSO_react+0x46>
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <main_region_DISPLAY_ENCENDIDO_react>:

static sc_integer main_region_DISPLAY_ENCENDIDO_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
	/* The reactions of state DISPLAY ENCENDIDO. */
 			sc_integer transitioned_after = transitioned_before;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7f5b      	ldrb	r3, [r3, #29]
 8000c18:	f083 0301 	eor.w	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d056      	beq.n	8000cd0 <main_region_DISPLAY_ENCENDIDO_react+0xca>
	{ 
		if ((transitioned_after) < (0))
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da11      	bge.n	8000c4c <main_region_DISPLAY_ENCENDIDO_react+0x46>
		{ 
			if (handle->ifaceBoton.reinicio_pressed_raised == bool_true)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7c1b      	ldrb	r3, [r3, #16]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00d      	beq.n	8000c4c <main_region_DISPLAY_ENCENDIDO_react+0x46>
			{ 
				exseq_main_region_DISPLAY_ENCENDIDO(handle);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff20 	bl	8000a76 <exseq_main_region_DISPLAY_ENCENDIDO>
				statechart_reiniciar_display(handle);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 fc44 	bl	80014c4 <statechart_reiniciar_display>
				statechart_reiniciar_timer(handle);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 fc8f 	bl	8001560 <statechart_reiniciar_timer>
				enseq_main_region_REPOSO_default(handle);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff feae 	bl	80009a4 <enseq_main_region_REPOSO_default>
				transitioned_after = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d13d      	bne.n	8000cd0 <main_region_DISPLAY_ENCENDIDO_react+0xca>
		{ 
			/* then execute local reactions. */
			if (((handle->iface.paso_el_auto_raised) == bool_true) && (((handle->iface.cantidad_vueltas) == (handle->iface.total_vueltas)) == bool_true))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00b      	beq.n	8000c74 <main_region_DISPLAY_ENCENDIDO_react+0x6e>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d105      	bne.n	8000c74 <main_region_DISPLAY_ENCENDIDO_react+0x6e>
			{ 
				statechart_registrar_velocidad(handle);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fcb1 	bl	80015d0 <statechart_registrar_velocidad>
				statechart_mostrar_velocidad(handle);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 fccc 	bl	800160c <statechart_mostrar_velocidad>
			} 
			if (((handle->iface.paso_el_auto_raised) == bool_true) && (((handle->iface.cantidad_vueltas) < (handle->iface.total_vueltas)) == bool_true))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00d      	beq.n	8000c98 <main_region_DISPLAY_ENCENDIDO_react+0x92>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	da07      	bge.n	8000c98 <main_region_DISPLAY_ENCENDIDO_react+0x92>
			{ 
				statechart_registrar_tiempo(handle);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fc7b 	bl	8001584 <statechart_registrar_tiempo>
				handle->iface.cantidad_vueltas++;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
			} 
			if (((handle->ifaceBoton.velocidad_pressed_raised) == bool_true) && (((handle->iface.cantidad_vueltas) >= (handle->iface.total_vueltas)) == bool_true))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7c5b      	ldrb	r3, [r3, #17]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d008      	beq.n	8000cb2 <main_region_DISPLAY_ENCENDIDO_react+0xac>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	db02      	blt.n	8000cb2 <main_region_DISPLAY_ENCENDIDO_react+0xac>
			{ 
				statechart_mostrar_velocidad(handle);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 fcad 	bl	800160c <statechart_mostrar_velocidad>
			} 
			if (((handle->ifaceBoton.tiempo_total_pressed_raised) == bool_true) && (((handle->iface.cantidad_vueltas) >= (handle->iface.total_vueltas)) == bool_true))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7c9b      	ldrb	r3, [r3, #18]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <main_region_DISPLAY_ENCENDIDO_react+0xc6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	db02      	blt.n	8000ccc <main_region_DISPLAY_ENCENDIDO_react+0xc6>
			{ 
				statechart_mostrar_tiempo_total(handle);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 fcb0 	bl	800162c <statechart_mostrar_tiempo_total>
			} 
			transitioned_after = transitioned_before;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <main_region_DISPLAY_ENCENDIDO_r1_LED3_react>:

static sc_integer main_region_DISPLAY_ENCENDIDO_r1_LED3_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
	/* The reactions of state LED3. */
 			sc_integer transitioned_after = transitioned_before;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f5b      	ldrb	r3, [r3, #29]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d01e      	beq.n	8000d34 <main_region_DISPLAY_ENCENDIDO_r1_LED3_react+0x5a>
	{ 
		if ((transitioned_after) < (0))
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da12      	bge.n	8000d22 <main_region_DISPLAY_ENCENDIDO_r1_LED3_react+0x48>
		{ 
			if (handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised == bool_true)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e1b      	ldrb	r3, [r3, #24]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00e      	beq.n	8000d22 <main_region_DISPLAY_ENCENDIDO_r1_LED3_react+0x48>
			{ 
				exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3(handle);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fec4 	bl	8000a92 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED3>
				handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised = bool_false;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	761a      	strb	r2, [r3, #24]
				enseq_main_region_DISPLAY_ENCENDIDO_r1_LED4_default(handle);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fe63 	bl	80009dc <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED4_default>
				main_region_DISPLAY_ENCENDIDO_react(handle,0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff74 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
				transitioned_after = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d104      	bne.n	8000d34 <main_region_DISPLAY_ENCENDIDO_r1_LED3_react+0x5a>
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_DISPLAY_ENCENDIDO_react(handle,transitioned_before);
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff6a 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
 8000d32:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <main_region_DISPLAY_ENCENDIDO_r1_LED4_react>:

static sc_integer main_region_DISPLAY_ENCENDIDO_r1_LED4_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	/* The reactions of state LED4. */
 			sc_integer transitioned_after = transitioned_before;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7f5b      	ldrb	r3, [r3, #29]
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01e      	beq.n	8000d98 <main_region_DISPLAY_ENCENDIDO_r1_LED4_react+0x5a>
	{ 
		if ((transitioned_after) < (0))
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da12      	bge.n	8000d86 <main_region_DISPLAY_ENCENDIDO_r1_LED4_react+0x48>
		{ 
			if (handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised == bool_true)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e5b      	ldrb	r3, [r3, #25]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00e      	beq.n	8000d86 <main_region_DISPLAY_ENCENDIDO_r1_LED4_react+0x48>
			{ 
				exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4(handle);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fea0 	bl	8000aae <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED4>
				handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised = bool_false;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	765a      	strb	r2, [r3, #25]
				enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default(handle);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fe3f 	bl	80009f8 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED1_default>
				main_region_DISPLAY_ENCENDIDO_react(handle,0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff42 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
				transitioned_after = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d104      	bne.n	8000d98 <main_region_DISPLAY_ENCENDIDO_r1_LED4_react+0x5a>
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_DISPLAY_ENCENDIDO_react(handle,transitioned_before);
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff38 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
 8000d96:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <main_region_DISPLAY_ENCENDIDO_r1_LED1_react>:

static sc_integer main_region_DISPLAY_ENCENDIDO_r1_LED1_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	/* The reactions of state LED1. */
 			sc_integer transitioned_after = transitioned_before;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7f5b      	ldrb	r3, [r3, #29]
 8000db4:	f083 0301 	eor.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d01e      	beq.n	8000dfc <main_region_DISPLAY_ENCENDIDO_r1_LED1_react+0x5a>
	{ 
		if ((transitioned_after) < (0))
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da12      	bge.n	8000dea <main_region_DISPLAY_ENCENDIDO_r1_LED1_react+0x48>
		{ 
			if (handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised == bool_true)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e9b      	ldrb	r3, [r3, #26]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00e      	beq.n	8000dea <main_region_DISPLAY_ENCENDIDO_r1_LED1_react+0x48>
			{ 
				exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1(handle);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe7c 	bl	8000aca <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED1>
				handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised = bool_false;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	769a      	strb	r2, [r3, #26]
				enseq_main_region_DISPLAY_ENCENDIDO_r1_LED2_default(handle);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fe1b 	bl	8000a14 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED2_default>
				main_region_DISPLAY_ENCENDIDO_react(handle,0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff10 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
				transitioned_after = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d104      	bne.n	8000dfc <main_region_DISPLAY_ENCENDIDO_r1_LED1_react+0x5a>
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_DISPLAY_ENCENDIDO_react(handle,transitioned_before);
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff06 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
 8000dfa:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <main_region_DISPLAY_ENCENDIDO_r1_LED2_react>:

static sc_integer main_region_DISPLAY_ENCENDIDO_r1_LED2_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
	/* The reactions of state LED2. */
 			sc_integer transitioned_after = transitioned_before;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7f5b      	ldrb	r3, [r3, #29]
 8000e18:	f083 0301 	eor.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d01e      	beq.n	8000e60 <main_region_DISPLAY_ENCENDIDO_r1_LED2_react+0x5a>
	{ 
		if ((transitioned_after) < (0))
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da12      	bge.n	8000e4e <main_region_DISPLAY_ENCENDIDO_r1_LED2_react+0x48>
		{ 
			if (handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised == bool_true)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7edb      	ldrb	r3, [r3, #27]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00e      	beq.n	8000e4e <main_region_DISPLAY_ENCENDIDO_r1_LED2_react+0x48>
			{ 
				exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2(handle);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fe58 	bl	8000ae6 <exseq_main_region_DISPLAY_ENCENDIDO_r1_LED2>
				handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised = bool_false;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	76da      	strb	r2, [r3, #27]
				enseq_main_region_DISPLAY_ENCENDIDO_r1_LED3_default(handle);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fdbf 	bl	80009c0 <enseq_main_region_DISPLAY_ENCENDIDO_r1_LED3_default>
				main_region_DISPLAY_ENCENDIDO_react(handle,0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fede 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
				transitioned_after = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d104      	bne.n	8000e60 <main_region_DISPLAY_ENCENDIDO_r1_LED2_react+0x5a>
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_DISPLAY_ENCENDIDO_react(handle,transitioned_before);
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fed4 	bl	8000c06 <main_region_DISPLAY_ENCENDIDO_react>
 8000e5e:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <statechart_eventqueue_init>:




static void statechart_eventqueue_init(statechart_eventqueue * eq, statechart_event *buffer, sc_integer capacity)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
	eq->events = buffer;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	601a      	str	r2, [r3, #0]
	eq->capacity = capacity;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	605a      	str	r2, [r3, #4]
	eq->push_index = 0;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
	eq->pop_index = 0;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	eq->size = 0;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <statechart_eventqueue_size>:

static sc_integer statechart_eventqueue_size(statechart_eventqueue * eq)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	return eq->size;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <statechart_eventqueue_pop>:

static statechart_event statechart_eventqueue_pop(statechart_eventqueue * eq)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	statechart_event event;
	if(statechart_eventqueue_size(eq) <= 0) {
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffed 	bl	8000ea0 <statechart_eventqueue_size>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dc06      	bgt.n	8000eda <statechart_eventqueue_pop+0x22>
		statechart_event_init(&event, Statechart_invalid_event);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f852 	bl	8000f7c <statechart_event_init>
 8000ed8:	e01b      	b.n	8000f12 <statechart_eventqueue_pop+0x5a>
	}
	else {
		event = eq->events[eq->pop_index];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6892      	ldr	r2, [r2, #8]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	733b      	strb	r3, [r7, #12]
		
		if(eq->pop_index < eq->capacity - 1) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	da05      	bge.n	8000f02 <statechart_eventqueue_pop+0x4a>
			eq->pop_index++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e002      	b.n	8000f08 <statechart_eventqueue_pop+0x50>
		} 
		else {
			eq->pop_index = 0;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
		}
		eq->size--;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]
	}
	return event;
 8000f12:	7b3b      	ldrb	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <statechart_eventqueue_push>:
static sc_boolean statechart_eventqueue_push(statechart_eventqueue * eq, statechart_event ev)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	7039      	strb	r1, [r7, #0]
	if(statechart_eventqueue_size(eq) == eq->capacity) {
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffba 	bl	8000ea0 <statechart_eventqueue_size>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d101      	bne.n	8000f3a <statechart_eventqueue_push+0x1e>
		return bool_false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e01c      	b.n	8000f74 <statechart_eventqueue_push+0x58>
	}
	else {
		eq->events[eq->push_index] = ev;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68d2      	ldr	r2, [r2, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	783a      	ldrb	r2, [r7, #0]
 8000f46:	701a      	strb	r2, [r3, #0]
		
		if(eq->push_index < eq->capacity - 1) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	429a      	cmp	r2, r3
 8000f54:	da05      	bge.n	8000f62 <statechart_eventqueue_push+0x46>
			eq->push_index++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	e002      	b.n	8000f68 <statechart_eventqueue_push+0x4c>
		}
		else {
			eq->push_index = 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
		}
		eq->size++;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	611a      	str	r2, [r3, #16]
		
		return bool_true;
 8000f72:	2301      	movs	r3, #1
	}
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <statechart_event_init>:
static void statechart_event_init(statechart_event * ev, StatechartEventID name)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
	ev->name = name;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <statechart_add_event_to_queue>:

static void statechart_add_event_to_queue(statechart_eventqueue * eq, StatechartEventID name)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
	statechart_event event;
	statechart_event_init(&event, name);
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffe4 	bl	8000f7c <statechart_event_init>
	statechart_eventqueue_push(eq, event);
 8000fb4:	7b39      	ldrb	r1, [r7, #12]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <statechart_eventqueue_push>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <statechart_dispatch_event>:

static sc_boolean statechart_dispatch_event(Statechart* handle, const statechart_event * event) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	switch(event->name) {
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d83b      	bhi.n	8001050 <statechart_dispatch_event+0x8c>
 8000fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <statechart_dispatch_event+0x1c>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08001001 	.word	0x08001001
 8000fe4:	0800100b 	.word	0x0800100b
 8000fe8:	08001015 	.word	0x08001015
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	08001029 	.word	0x08001029
 8000ff4:	08001033 	.word	0x08001033
 8000ff8:	0800103d 	.word	0x0800103d
 8000ffc:	08001047 	.word	0x08001047
		case Statechart_paso_el_auto:
		{
			handle->iface.paso_el_auto_raised = bool_true;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	711a      	strb	r2, [r3, #4]
			return bool_true;
 8001006:	2301      	movs	r3, #1
 8001008:	e023      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_boton_reinicio_pressed:
		{
			handle->ifaceBoton.reinicio_pressed_raised = bool_true;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	741a      	strb	r2, [r3, #16]
			return bool_true;
 8001010:	2301      	movs	r3, #1
 8001012:	e01e      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_boton_velocidad_pressed:
		{
			handle->ifaceBoton.velocidad_pressed_raised = bool_true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	745a      	strb	r2, [r3, #17]
			return bool_true;
 800101a:	2301      	movs	r3, #1
 800101c:	e019      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_boton_tiempo_total_pressed:
		{
			handle->ifaceBoton.tiempo_total_pressed_raised = bool_true;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	749a      	strb	r2, [r3, #18]
			return bool_true;
 8001024:	2301      	movs	r3, #1
 8001026:	e014      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_time_event_0:
		{
			handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised = bool_true;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	761a      	strb	r2, [r3, #24]
			return bool_true;
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_time_event_0:
		{
			handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised = bool_true;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	765a      	strb	r2, [r3, #25]
			return bool_true;
 8001038:	2301      	movs	r3, #1
 800103a:	e00a      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_time_event_0:
		{
			handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised = bool_true;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	769a      	strb	r2, [r3, #26]
			return bool_true;
 8001042:	2301      	movs	r3, #1
 8001044:	e005      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		case Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_time_event_0:
		{
			handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised = bool_true;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	76da      	strb	r2, [r3, #27]
			return bool_true;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <statechart_dispatch_event+0x8e>
		}
		default:
			return bool_false;
 8001050:	2300      	movs	r3, #0
	}
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <statechart_get_next_event>:

static statechart_event statechart_get_next_event(Statechart* handle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	statechart_event next_event;
	statechart_event_init(&next_event, Statechart_invalid_event);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff84 	bl	8000f7c <statechart_event_init>
	if(statechart_eventqueue_size(&(handle->in_event_queue)) > 0) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3320      	adds	r3, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff11 	bl	8000ea0 <statechart_eventqueue_size>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd06      	ble.n	8001092 <statechart_get_next_event+0x32>
		next_event = statechart_eventqueue_pop(&(handle->in_event_queue));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3320      	adds	r3, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff15 	bl	8000eb8 <statechart_eventqueue_pop>
 800108e:	4603      	mov	r3, r0
 8001090:	733b      	strb	r3, [r7, #12]
	}
	return next_event;
 8001092:	7b3b      	ldrb	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <statechart_dispatch_next_event>:

static sc_boolean statechart_dispatch_next_event(Statechart* handle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	statechart_event nextEvent;
	nextEvent = statechart_get_next_event(handle);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffdb 	bl	8001060 <statechart_get_next_event>
 80010aa:	4603      	mov	r3, r0
 80010ac:	733b      	strb	r3, [r7, #12]
	return statechart_dispatch_event(handle, &nextEvent);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff85 	bl	8000fc4 <statechart_dispatch_event>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <statechart_get_timed_event_name>:

static StatechartEventID statechart_get_timed_event_name(Statechart* handle, sc_eventid evid)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	if(evid == &handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_tev0_raised) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3318      	adds	r3, #24
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d101      	bne.n	80010dc <statechart_get_timed_event_name+0x18>
		return Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED3_time_event_0;
 80010d8:	2305      	movs	r3, #5
 80010da:	e015      	b.n	8001108 <statechart_get_timed_event_name+0x44>
	}
	if(evid == &handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_tev0_raised) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3319      	adds	r3, #25
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d101      	bne.n	80010ea <statechart_get_timed_event_name+0x26>
		return Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED4_time_event_0;
 80010e6:	2306      	movs	r3, #6
 80010e8:	e00e      	b.n	8001108 <statechart_get_timed_event_name+0x44>
	}
	if(evid == &handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_tev0_raised) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	331a      	adds	r3, #26
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d101      	bne.n	80010f8 <statechart_get_timed_event_name+0x34>
		return Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED1_time_event_0;
 80010f4:	2307      	movs	r3, #7
 80010f6:	e007      	b.n	8001108 <statechart_get_timed_event_name+0x44>
	}
	if(evid == &handle->timeEvents.statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_tev0_raised) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	331b      	adds	r3, #27
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d101      	bne.n	8001106 <statechart_get_timed_event_name+0x42>
		return Statechart_Statechart_main_region_DISPLAY_ENCENDIDO_r1_LED2_time_event_0;
 8001102:	2308      	movs	r3, #8
 8001104:	e000      	b.n	8001108 <statechart_get_timed_event_name+0x44>
	}
	return Statechart_invalid_event;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001118:	f000 ff72 	bl	8002000 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800111c:	f000 f846 	bl	80011ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001120:	f000 f914 	bl	800134c <MX_GPIO_Init>
	MX_TIM2_Init();
 8001124:	f000 f8a0 	bl	8001268 <MX_TIM2_Init>
	MX_TIM14_Init();
 8001128:	f000 f8ec 	bl	8001304 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	statechart_init(&sc); // Prepara la FSM para su ejecución
 800112c:	481b      	ldr	r0, [pc, #108]	@ (800119c <main+0x88>)
 800112e:	f7ff f9e1 	bl	80004f4 <statechart_init>
	statechart_enter(&sc);
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <main+0x88>)
 8001134:	f7ff fa0f 	bl	8000556 <statechart_enter>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (filtrando) {
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <main+0x8c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <main+0x32>
			filtrar_rebotes();
 8001142:	f000 fb63 	bl	800180c <filtrar_rebotes>
		}

		// Si hubo una solicitud ejecutamos la operación del botón pulsado y luego reseteamos el flag de solicitud
		if (solicitud_pendiente) {
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <main+0x90>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f3      	beq.n	8001138 <main+0x24>
			switch (boton_presionado) {
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <main+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	2b80      	cmp	r3, #128	@ 0x80
 8001158:	d00a      	beq.n	8001170 <main+0x5c>
 800115a:	2b80      	cmp	r3, #128	@ 0x80
 800115c:	dc18      	bgt.n	8001190 <main+0x7c>
 800115e:	2b20      	cmp	r3, #32
 8001160:	d012      	beq.n	8001188 <main+0x74>
 8001162:	2b20      	cmp	r3, #32
 8001164:	dc14      	bgt.n	8001190 <main+0x7c>
 8001166:	2b04      	cmp	r3, #4
 8001168:	d006      	beq.n	8001178 <main+0x64>
 800116a:	2b10      	cmp	r3, #16
 800116c:	d008      	beq.n	8001180 <main+0x6c>
				break;
			case GPIO_PIN_5:
				statechart_boton_raise_reinicio_pressed(&sc);
				break;
			default:
				break;
 800116e:	e00f      	b.n	8001190 <main+0x7c>
				statechart_raise_paso_el_auto(&sc);
 8001170:	480a      	ldr	r0, [pc, #40]	@ (800119c <main+0x88>)
 8001172:	f7ff fae1 	bl	8000738 <statechart_raise_paso_el_auto>
				break;
 8001176:	e00c      	b.n	8001192 <main+0x7e>
				statechart_boton_raise_velocidad_pressed(&sc);
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <main+0x88>)
 800117a:	f7ff fb33 	bl	80007e4 <statechart_boton_raise_velocidad_pressed>
				break;
 800117e:	e008      	b.n	8001192 <main+0x7e>
				statechart_boton_raise_tiempo_total_pressed(&sc);
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <main+0x88>)
 8001182:	f7ff fb40 	bl	8000806 <statechart_boton_raise_tiempo_total_pressed>
				break;
 8001186:	e004      	b.n	8001192 <main+0x7e>
				statechart_boton_raise_reinicio_pressed(&sc);
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <main+0x88>)
 800118a:	f7ff fb1a 	bl	80007c2 <statechart_boton_raise_reinicio_pressed>
				break;
 800118e:	e000      	b.n	8001192 <main+0x7e>
				break;
 8001190:	bf00      	nop
			}
			solicitud_pendiente = false;
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <main+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		if (filtrando) {
 8001198:	e7ce      	b.n	8001138 <main+0x24>
 800119a:	bf00      	nop
 800119c:	200000bc 	.word	0x200000bc
 80011a0:	20000105 	.word	0x20000105
 80011a4:	20000104 	.word	0x20000104
 80011a8:	20000000 	.word	0x20000000

080011ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	@ 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fbdc 	bl	8003978 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <SystemClock_Config+0xb4>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <SystemClock_Config+0xb4>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <SystemClock_Config+0xb4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <SystemClock_Config+0xb8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <SystemClock_Config+0xb8>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <SystemClock_Config+0xb8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fa59 	bl	80026d4 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x80>
	{
		Error_Handler();
 8001228:	f000 fdb8 	bl	8001d9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fcbc 	bl	8002bc4 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8001252:	f000 fda3 	bl	8001d9c <Error_Handler>
	}
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	@ 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM2_Init+0x98>)
 800128e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001292:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM2_Init+0x98>)
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012b0:	f001 fe34 	bl	8002f1c <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80012ba:	f000 fd6f 	bl	8001d9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012cc:	f002 f895 	bl	80033fa <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80012d6:	f000 fd61 	bl	8001d9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012e8:	f002 fab6 	bl	8003858 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80012f2:	f000 fd53 	bl	8001d9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000002c 	.word	0x2000002c

08001304 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_TIM14_Init+0x40>)
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <MX_TIM14_Init+0x44>)
 800130c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 15999;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_TIM14_Init+0x40>)
 8001310:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001314:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_TIM14_Init+0x40>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_TIM14_Init+0x40>)
 800131e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001322:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_TIM14_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_TIM14_Init+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_TIM14_Init+0x40>)
 8001332:	f001 fdf3 	bl	8002f1c <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM14_Init+0x3c>
	{
		Error_Handler();
 800133c:	f000 fd2e 	bl	8001d9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000074 	.word	0x20000074
 8001348:	40002000 	.word	0x40002000

0800134c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <MX_GPIO_Init+0x144>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <MX_GPIO_Init+0x144>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <MX_GPIO_Init+0x144>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <MX_GPIO_Init+0x144>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a42      	ldr	r2, [pc, #264]	@ (8001490 <MX_GPIO_Init+0x144>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <MX_GPIO_Init+0x144>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a34      	ldr	r2, [pc, #208]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <MX_GPIO_Init+0x144>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	482f      	ldr	r0, [pc, #188]	@ (8001494 <MX_GPIO_Init+0x148>)
 80013d8:	f001 f94a 	bl	8002670 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 417b 	mov.w	r1, #64256	@ 0xfb00
 80013e2:	482d      	ldr	r0, [pc, #180]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013e4:	f001 f944 	bl	8002670 <HAL_GPIO_WritePin>
			|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80013e8:	2305      	movs	r3, #5
 80013ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4825      	ldr	r0, [pc, #148]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001400:	f000 ff82 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001404:	2334      	movs	r3, #52	@ 0x34
 8001406:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800140c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4820      	ldr	r0, [pc, #128]	@ (800149c <MX_GPIO_Init+0x150>)
 800141a:	f000 ff75 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001426:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	481a      	ldr	r0, [pc, #104]	@ (800149c <MX_GPIO_Init+0x150>)
 8001434:	f000 ff68 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD11 PD12
                           PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12
 8001438:	f44f 437b 	mov.w	r3, #64256	@ 0xfb00
 800143c:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4811      	ldr	r0, [pc, #68]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001452:	f000 ff59 	bl	8002308 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2008      	movs	r0, #8
 800145c:	f000 ff1d 	bl	800229a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001460:	2008      	movs	r0, #8
 8001462:	f000 ff36 	bl	80022d2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	200a      	movs	r0, #10
 800146c:	f000 ff15 	bl	800229a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001470:	200a      	movs	r0, #10
 8001472:	f000 ff2e 	bl	80022d2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2017      	movs	r0, #23
 800147c:	f000 ff0d 	bl	800229a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001480:	2017      	movs	r0, #23
 8001482:	f000 ff26 	bl	80022d2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40020000 	.word	0x40020000

080014a0 <statechart_iniciar_timer>:

/* USER CODE BEGIN 4 */
void statechart_iniciar_timer(Statechart* handle) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2); // Inicio el Temporizador
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <statechart_iniciar_timer+0x20>)
 80014aa:	f001 fd87 	bl	8002fbc <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <statechart_iniciar_timer+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
	//	__HAL_TIM_SetAutoreload(&htim14);
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000002c 	.word	0x2000002c

080014c4 <statechart_reiniciar_display>:

void statechart_reiniciar_display(Statechart* handle) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	for (uint8_t i= 0; i < DIGITOS_DISPLAY; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e006      	b.n	80014e0 <statechart_reiniciar_display+0x1c>
		display[i] = 0;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <statechart_reiniciar_display+0x94>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i= 0; i < DIGITOS_DISPLAY; i++) {
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d9f5      	bls.n	80014d2 <statechart_reiniciar_display+0xe>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	2104      	movs	r1, #4
 80014ea:	481c      	ldr	r0, [pc, #112]	@ (800155c <statechart_reiniciar_display+0x98>)
 80014ec:	f001 f8c0 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2101      	movs	r1, #1
 80014f4:	4819      	ldr	r0, [pc, #100]	@ (800155c <statechart_reiniciar_display+0x98>)
 80014f6:	f001 f8bb 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(APAGADO);
 80014fa:	20ff      	movs	r0, #255	@ 0xff
 80014fc:	f000 f9b8 	bl	8001870 <codificar_digito_7seg>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2104      	movs	r1, #4
 8001504:	4815      	ldr	r0, [pc, #84]	@ (800155c <statechart_reiniciar_display+0x98>)
 8001506:	f001 f8b3 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2101      	movs	r1, #1
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <statechart_reiniciar_display+0x98>)
 8001510:	f001 f8ae 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(APAGADO);
 8001514:	20ff      	movs	r0, #255	@ 0xff
 8001516:	f000 f9ab 	bl	8001870 <codificar_digito_7seg>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2104      	movs	r1, #4
 800151e:	480f      	ldr	r0, [pc, #60]	@ (800155c <statechart_reiniciar_display+0x98>)
 8001520:	f001 f8a6 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2101      	movs	r1, #1
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <statechart_reiniciar_display+0x98>)
 800152a:	f001 f8a1 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(APAGADO);
 800152e:	20ff      	movs	r0, #255	@ 0xff
 8001530:	f000 f99e 	bl	8001870 <codificar_digito_7seg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2104      	movs	r1, #4
 8001538:	4808      	ldr	r0, [pc, #32]	@ (800155c <statechart_reiniciar_display+0x98>)
 800153a:	f001 f899 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	4806      	ldr	r0, [pc, #24]	@ (800155c <statechart_reiniciar_display+0x98>)
 8001544:	f001 f894 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(APAGADO);
 8001548:	20ff      	movs	r0, #255	@ 0xff
 800154a:	f000 f991 	bl	8001870 <codificar_digito_7seg>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000012c 	.word	0x2000012c
 800155c:	40020800 	.word	0x40020800

08001560 <statechart_reiniciar_timer>:


void statechart_reiniciar_timer(Statechart* handle) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim2);
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <statechart_reiniciar_timer+0x20>)
 800156a:	f001 fd8f 	bl	800308c <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <statechart_reiniciar_timer+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000002c 	.word	0x2000002c

08001584 <statechart_registrar_tiempo>:

void statechart_registrar_tiempo(Statechart* handle) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	uint32_t tiempo_actual = __HAL_TIM_GET_COUNTER(&htim2) / 1000; // Registro el tiempo de cada vuelta en segundos.
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <statechart_registrar_tiempo+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <statechart_registrar_tiempo+0x44>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <statechart_registrar_tiempo+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
	tiempos[statechart_get_cantidad_vueltas(handle)] = tiempo_actual; // Obtener cantidad de vueltas de interface de statechart
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f8d8 	bl	800075a <statechart_get_cantidad_vueltas>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <statechart_registrar_tiempo+0x48>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	set_display(tiempo_actual);
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fb5d 	bl	8001c74 <set_display>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000002c 	.word	0x2000002c
 80015c8:	10624dd3 	.word	0x10624dd3
 80015cc:	20000110 	.word	0x20000110

080015d0 <statechart_registrar_velocidad>:

void statechart_registrar_velocidad(Statechart* handle) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	tiempo_promedio = get_tiempo_promedio(handle);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fbaf 	bl	8001d3c <get_tiempo_promedio>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <statechart_registrar_velocidad+0x34>)
 80015e2:	6013      	str	r3, [r2, #0]
	velocidad_promedio = LONGITUD_PISTA / tiempo_promedio;
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <statechart_registrar_velocidad+0x34>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2264      	movs	r2, #100	@ 0x64
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <statechart_registrar_velocidad+0x38>)
 80015f0:	6013      	str	r3, [r2, #0]
	set_display(velocidad_promedio);
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <statechart_registrar_velocidad+0x38>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fb3c 	bl	8001c74 <set_display>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000120 	.word	0x20000120
 8001608:	20000124 	.word	0x20000124

0800160c <statechart_mostrar_velocidad>:

void statechart_mostrar_velocidad(Statechart* handle) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	set_display(velocidad_promedio);
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <statechart_mostrar_velocidad+0x1c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fb2b 	bl	8001c74 <set_display>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000124 	.word	0x20000124

0800162c <statechart_mostrar_tiempo_total>:

void statechart_mostrar_tiempo_total(Statechart* handle) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	set_display(tiempo_total);
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <statechart_mostrar_tiempo_total+0x1c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fb1b 	bl	8001c74 <set_display>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000128 	.word	0x20000128

0800164c <statechart_set_timer>:

void statechart_set_timer(Statechart* handle, const sc_eventid evid, const sc_time time_ms, const sc_boolean periodic)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	70fb      	strb	r3, [r7, #3]
	current_evid = evid;
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <statechart_set_timer+0x30>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim14, time_ms); // Establece el periodo con el dato del delay de StateChart
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <statechart_set_timer+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <statechart_set_timer+0x34>)
 800166c:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim14); // Activa el temporizador con interrupcion
 800166e:	4804      	ldr	r0, [pc, #16]	@ (8001680 <statechart_set_timer+0x34>)
 8001670:	f001 fd34 	bl	80030dc <HAL_TIM_Base_Start_IT>
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000010c 	.word	0x2000010c
 8001680:	20000074 	.word	0x20000074

08001684 <statechart_unset_timer>:

void statechart_unset_timer(Statechart* handle, const sc_eventid evid)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim14);
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <statechart_unset_timer+0x28>)
 8001690:	f001 fd94 	bl	80031bc <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <statechart_unset_timer+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0201 	mvn.w	r2, #1
 800169c:	611a      	str	r2, [r3, #16]
	current_evid = 0;
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <statechart_unset_timer+0x2c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000074 	.word	0x20000074
 80016b0:	2000010c 	.word	0x2000010c

080016b4 <statechart_prender_LED1>:

void statechart_prender_LED1(Statechart* handle) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	2104      	movs	r1, #4
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <statechart_prender_LED1+0x30>)
 80016c2:	f000 ffd5 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2101      	movs	r1, #1
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <statechart_prender_LED1+0x30>)
 80016cc:	f000 ffd0 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(display[0]);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <statechart_prender_LED1+0x34>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f8ca 	bl	8001870 <codificar_digito_7seg>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020800 	.word	0x40020800
 80016e8:	2000012c 	.word	0x2000012c

080016ec <statechart_prender_LED2>:

void statechart_prender_LED2(Statechart* handle) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2104      	movs	r1, #4
 80016f8:	4808      	ldr	r0, [pc, #32]	@ (800171c <statechart_prender_LED2+0x30>)
 80016fa:	f000 ffb9 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	4806      	ldr	r0, [pc, #24]	@ (800171c <statechart_prender_LED2+0x30>)
 8001704:	f000 ffb4 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(display[1]);
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <statechart_prender_LED2+0x34>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f8ae 	bl	8001870 <codificar_digito_7seg>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020800 	.word	0x40020800
 8001720:	2000012c 	.word	0x2000012c

08001724 <statechart_prender_LED3>:

void statechart_prender_LED3(Statechart* handle) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2104      	movs	r1, #4
 8001730:	4808      	ldr	r0, [pc, #32]	@ (8001754 <statechart_prender_LED3+0x30>)
 8001732:	f000 ff9d 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <statechart_prender_LED3+0x30>)
 800173c:	f000 ff98 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(display[2]);
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <statechart_prender_LED3+0x34>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f892 	bl	8001870 <codificar_digito_7seg>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020800 	.word	0x40020800
 8001758:	2000012c 	.word	0x2000012c

0800175c <statechart_prender_LED4>:

void statechart_prender_LED4(Statechart* handle) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2104      	movs	r1, #4
 8001768:	4808      	ldr	r0, [pc, #32]	@ (800178c <statechart_prender_LED4+0x30>)
 800176a:	f000 ff81 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2101      	movs	r1, #1
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <statechart_prender_LED4+0x30>)
 8001774:	f000 ff7c 	bl	8002670 <HAL_GPIO_WritePin>
	codificar_digito_7seg(display[3]);
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <statechart_prender_LED4+0x34>)
 800177a:	78db      	ldrb	r3, [r3, #3]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f876 	bl	8001870 <codificar_digito_7seg>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40020800 	.word	0x40020800
 8001790:	2000012c 	.word	0x2000012c

08001794 <HAL_GPIO_EXTI_Callback>:

// Código que se ejecuta cuando se detecta la interrupción
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	//	if (GPIO_Pin == GPIO_PIN_7) {
	//		statechart_raise_paso_el_auto(&sc);
	//	}
	if (!filtrando) {
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_GPIO_EXTI_Callback+0x38>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_GPIO_EXTI_Callback+0x30>
		tiempo_inicio = HAL_GetTick();
 80017ae:	f000 fc8d 	bl	80020cc <HAL_GetTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017b6:	6013      	str	r3, [r2, #0]
		boton_presionado = GPIO_Pin;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	8013      	strh	r3, [r2, #0]
		filtrando = true;
 80017be:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_GPIO_EXTI_Callback+0x38>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
	}
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000105 	.word	0x20000105
 80017d0:	20000108 	.word	0x20000108
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d105      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		statechart_raise_time_event(&sc, current_evid);
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017f2:	f7fe fee0 	bl	80005b6 <statechart_raise_time_event>
	}
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40002000 	.word	0x40002000
 8001804:	2000010c 	.word	0x2000010c
 8001808:	200000bc 	.word	0x200000bc

0800180c <filtrar_rebotes>:

// Filtramos los rebotes
void filtrar_rebotes(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 8001812:	f000 fc5b 	bl	80020cc <HAL_GetTick>
 8001816:	6078      	str	r0, [r7, #4]
	bool boton_estable = (tiempo_actual - tiempo_inicio) >= TIEMPO_REBOTE;
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <filtrar_rebotes+0x50>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b31      	cmp	r3, #49	@ 0x31
 8001822:	bf8c      	ite	hi
 8001824:	2301      	movhi	r3, #1
 8001826:	2300      	movls	r3, #0
 8001828:	70fb      	strb	r3, [r7, #3]
	if (boton_estable) {
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d011      	beq.n	8001854 <filtrar_rebotes+0x48>
		GPIO_PinState estado_boton = HAL_GPIO_ReadPin(GPIOA, boton_presionado);
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <filtrar_rebotes+0x54>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	480a      	ldr	r0, [pc, #40]	@ (8001864 <filtrar_rebotes+0x58>)
 800183a:	f000 ff01 	bl	8002640 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	70bb      	strb	r3, [r7, #2]
		// Si está presionado consideramos que hay una solicitud para avanzar en la secuencia
		if (estado_boton == GPIO_PIN_RESET) {
 8001842:	78bb      	ldrb	r3, [r7, #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <filtrar_rebotes+0x42>
			// Indicamos que hay una solicitud
			solicitud_pendiente = true;
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <filtrar_rebotes+0x5c>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
		}
		filtrando = false;
 800184e:	4b07      	ldr	r3, [pc, #28]	@ (800186c <filtrar_rebotes+0x60>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	}
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000108 	.word	0x20000108
 8001860:	20000000 	.word	0x20000000
 8001864:	40020000 	.word	0x40020000
 8001868:	20000104 	.word	0x20000104
 800186c:	20000105 	.word	0x20000105

08001870 <codificar_digito_7seg>:

void codificar_digito_7seg(uint8_t digito) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	switch (digito) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b09      	cmp	r3, #9
 800187e:	f200 81c7 	bhi.w	8001c10 <codificar_digito_7seg+0x3a0>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <codificar_digito_7seg+0x18>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	080018b1 	.word	0x080018b1
 800188c:	08001907 	.word	0x08001907
 8001890:	0800195d 	.word	0x0800195d
 8001894:	080019b3 	.word	0x080019b3
 8001898:	08001a09 	.word	0x08001a09
 800189c:	08001a5f 	.word	0x08001a5f
 80018a0:	08001ab5 	.word	0x08001ab5
 80018a4:	08001b0b 	.word	0x08001b0b
 80018a8:	08001b61 	.word	0x08001b61
 80018ac:	08001bb7 	.word	0x08001bb7
	case 0:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b6:	48d5      	ldr	r0, [pc, #852]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018b8:	f000 feda 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c2:	48d2      	ldr	r0, [pc, #840]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018c4:	f000 fed4 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ce:	48cf      	ldr	r0, [pc, #828]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018d0:	f000 fece 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018da:	48cc      	ldr	r0, [pc, #816]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018dc:	f000 fec8 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e6:	48c9      	ldr	r0, [pc, #804]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018e8:	f000 fec2 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018f2:	48c6      	ldr	r0, [pc, #792]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80018f4:	f000 febc 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fe:	48c3      	ldr	r0, [pc, #780]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001900:	f000 feb6 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001904:	e1af      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 1:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800190c:	48bf      	ldr	r0, [pc, #764]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 800190e:	f000 feaf 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001918:	48bc      	ldr	r0, [pc, #752]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 800191a:	f000 fea9 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001924:	48b9      	ldr	r0, [pc, #740]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001926:	f000 fea3 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001930:	48b6      	ldr	r0, [pc, #728]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001932:	f000 fe9d 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800193c:	48b3      	ldr	r0, [pc, #716]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 800193e:	f000 fe97 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001948:	48b0      	ldr	r0, [pc, #704]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 800194a:	f000 fe91 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001954:	48ad      	ldr	r0, [pc, #692]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001956:	f000 fe8b 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 800195a:	e184      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 2:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001962:	48aa      	ldr	r0, [pc, #680]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001964:	f000 fe84 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196e:	48a7      	ldr	r0, [pc, #668]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001970:	f000 fe7e 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197a:	48a4      	ldr	r0, [pc, #656]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 800197c:	f000 fe78 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001986:	48a1      	ldr	r0, [pc, #644]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001988:	f000 fe72 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001992:	489e      	ldr	r0, [pc, #632]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001994:	f000 fe6c 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199e:	489b      	ldr	r0, [pc, #620]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019a0:	f000 fe66 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019aa:	4898      	ldr	r0, [pc, #608]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019ac:	f000 fe60 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 80019b0:	e159      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b8:	4894      	ldr	r0, [pc, #592]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019ba:	f000 fe59 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c4:	4891      	ldr	r0, [pc, #580]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019c6:	f000 fe53 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d0:	488e      	ldr	r0, [pc, #568]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019d2:	f000 fe4d 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019dc:	488b      	ldr	r0, [pc, #556]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019de:	f000 fe47 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	4888      	ldr	r0, [pc, #544]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019ea:	f000 fe41 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019f4:	4885      	ldr	r0, [pc, #532]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 80019f6:	f000 fe3b 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a00:	4882      	ldr	r0, [pc, #520]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a02:	f000 fe35 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001a06:	e12e      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 4:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a0e:	487f      	ldr	r0, [pc, #508]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a10:	f000 fe2e 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1a:	487c      	ldr	r0, [pc, #496]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a1c:	f000 fe28 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a26:	4879      	ldr	r0, [pc, #484]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a28:	f000 fe22 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a32:	4876      	ldr	r0, [pc, #472]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a34:	f000 fe1c 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a3e:	4873      	ldr	r0, [pc, #460]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a40:	f000 fe16 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a4a:	4870      	ldr	r0, [pc, #448]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a4c:	f000 fe10 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a56:	486d      	ldr	r0, [pc, #436]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a58:	f000 fe0a 	bl	8002670 <HAL_GPIO_WritePin>

		break;
 8001a5c:	e103      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 5:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a64:	4869      	ldr	r0, [pc, #420]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a66:	f000 fe03 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a70:	4866      	ldr	r0, [pc, #408]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a72:	f000 fdfd 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a7c:	4863      	ldr	r0, [pc, #396]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a7e:	f000 fdf7 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a88:	4860      	ldr	r0, [pc, #384]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a8a:	f000 fdf1 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a94:	485d      	ldr	r0, [pc, #372]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001a96:	f000 fdeb 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa0:	485a      	ldr	r0, [pc, #360]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001aa2:	f000 fde5 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aac:	4857      	ldr	r0, [pc, #348]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001aae:	f000 fddf 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001ab2:	e0d8      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 6:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aba:	4854      	ldr	r0, [pc, #336]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001abc:	f000 fdd8 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac6:	4851      	ldr	r0, [pc, #324]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001ac8:	f000 fdd2 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ad2:	484e      	ldr	r0, [pc, #312]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001ad4:	f000 fdcc 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ade:	484b      	ldr	r0, [pc, #300]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001ae0:	f000 fdc6 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aea:	4848      	ldr	r0, [pc, #288]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001aec:	f000 fdc0 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af6:	4845      	ldr	r0, [pc, #276]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001af8:	f000 fdba 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b02:	4842      	ldr	r0, [pc, #264]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b04:	f000 fdb4 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001b08:	e0ad      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 7:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b10:	483e      	ldr	r0, [pc, #248]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b12:	f000 fdad 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1c:	483b      	ldr	r0, [pc, #236]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b1e:	f000 fda7 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b28:	4838      	ldr	r0, [pc, #224]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b2a:	f000 fda1 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b34:	4835      	ldr	r0, [pc, #212]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b36:	f000 fd9b 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b40:	4832      	ldr	r0, [pc, #200]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b42:	f000 fd95 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b4c:	482f      	ldr	r0, [pc, #188]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b4e:	f000 fd8f 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b58:	482c      	ldr	r0, [pc, #176]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b5a:	f000 fd89 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001b5e:	e082      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 8:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b66:	4829      	ldr	r0, [pc, #164]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b68:	f000 fd82 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b72:	4826      	ldr	r0, [pc, #152]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b74:	f000 fd7c 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b7e:	4823      	ldr	r0, [pc, #140]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b80:	f000 fd76 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8a:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b8c:	f000 fd70 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b96:	481d      	ldr	r0, [pc, #116]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001b98:	f000 fd6a 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ba2:	481a      	ldr	r0, [pc, #104]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001ba4:	f000 fd64 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bae:	4817      	ldr	r0, [pc, #92]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bb0:	f000 fd5e 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001bb4:	e057      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
	case 9:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bbc:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bbe:	f000 fd57 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc8:	4810      	ldr	r0, [pc, #64]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bca:	f000 fd51 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd4:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bd6:	f000 fd4b 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be0:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001be2:	f000 fd45 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bec:	4807      	ldr	r0, [pc, #28]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bee:	f000 fd3f 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001bfa:	f000 fd39 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c04:	4801      	ldr	r0, [pc, #4]	@ (8001c0c <codificar_digito_7seg+0x39c>)
 8001c06:	f000 fd33 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001c0a:	e02c      	b.n	8001c66 <codificar_digito_7seg+0x3f6>
 8001c0c:	40020c00 	.word	0x40020c00
	case APAGADO:
	default:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c16:	4816      	ldr	r0, [pc, #88]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c18:	f000 fd2a 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c22:	4813      	ldr	r0, [pc, #76]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c24:	f000 fd24 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2e:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c30:	f000 fd1e 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c3c:	f000 fd18 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c46:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c48:	f000 fd12 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c54:	f000 fd0c 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c5e:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <codificar_digito_7seg+0x400>)
 8001c60:	f000 fd06 	bl	8002670 <HAL_GPIO_WritePin>
		break;
 8001c64:	bf00      	nop
	}
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020c00 	.word	0x40020c00

08001c74 <set_display>:

void set_display(uint32_t dato) {
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	// Si tengo más dígitos que los que entran, trunco los menos significativos
	uint8_t cantidad_digitos = 1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
	uint32_t aux = dato;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
	while (aux >= 10) {
 8001c84:	e008      	b.n	8001c98 <set_display+0x24>
		aux /= 10;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4a2a      	ldr	r2, [pc, #168]	@ (8001d34 <set_display+0xc0>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	61bb      	str	r3, [r7, #24]
		cantidad_digitos++;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	3301      	adds	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]
	while (aux >= 10) {
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b09      	cmp	r3, #9
 8001c9c:	d8f3      	bhi.n	8001c86 <set_display+0x12>
	}

	if (cantidad_digitos > DIGITOS_DISPLAY) {
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d90e      	bls.n	8001cc2 <set_display+0x4e>
		uint8_t sobra = cantidad_digitos - DIGITOS_DISPLAY;
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	75fb      	strb	r3, [r7, #23]
		// Dejo los dígitos más significativos
		while (sobra--) {
 8001caa:	e005      	b.n	8001cb8 <set_display+0x44>
			dato /= 10;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <set_display+0xc0>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	607b      	str	r3, [r7, #4]
		while (sobra--) {
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	75fa      	strb	r2, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f4      	bne.n	8001cac <set_display+0x38>
		}
	}

	for (int i = DIGITOS_DISPLAY - 1; i >= 0; i--) {
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e018      	b.n	8001cfa <set_display+0x86>
		display[i] = (uint8_t)(dato % 10);
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <set_display+0xc0>)
 8001ccc:	fba3 2301 	umull	r2, r3, r3, r1
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	1aca      	subs	r2, r1, r3
 8001cdc:	b2d1      	uxtb	r1, r2
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <set_display+0xc4>)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
		dato /= 10;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <set_display+0xc0>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	607b      	str	r3, [r7, #4]
	for (int i = DIGITOS_DISPLAY - 1; i >= 0; i--) {
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dae3      	bge.n	8001cc8 <set_display+0x54>
	}

	int i = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
	while (i < (DIGITOS_DISPLAY - 1) && display[i] == 0) {
 8001d04:	e005      	b.n	8001d12 <set_display+0x9e>
		display[i++] = APAGADO;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <set_display+0xc4>)
 8001d0e:	21ff      	movs	r1, #255	@ 0xff
 8001d10:	54d1      	strb	r1, [r2, r3]
	while (i < (DIGITOS_DISPLAY - 1) && display[i] == 0) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	dc06      	bgt.n	8001d26 <set_display+0xb2>
 8001d18:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <set_display+0xc4>)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ef      	beq.n	8001d06 <set_display+0x92>
	}
}
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	2000012c 	.word	0x2000012c

08001d3c <get_tiempo_promedio>:

uint32_t get_tiempo_promedio(const Statechart* handle) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	uint32_t resultado = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
	tiempo_total = 0;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <get_tiempo_promedio+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	uint32_t total_vueltas = statechart_get_total_vueltas(handle);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fd1d 	bl	800078e <statechart_get_total_vueltas>
 8001d54:	4603      	mov	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < total_vueltas; i++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00b      	b.n	8001d76 <get_tiempo_promedio+0x3a>
		tiempo_total += tiempos[i];
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d98 <get_tiempo_promedio+0x5c>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <get_tiempo_promedio+0x58>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <get_tiempo_promedio+0x58>)
 8001d6e:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < total_vueltas; i++) {
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d3ef      	bcc.n	8001d5e <get_tiempo_promedio+0x22>
	}
	resultado = tiempo_total / total_vueltas;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <get_tiempo_promedio+0x58>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	613b      	str	r3, [r7, #16]
	return resultado;
 8001d8a:	693b      	ldr	r3, [r7, #16]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000128 	.word	0x20000128
 8001d98:	20000110 	.word	0x20000110

08001d9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <Error_Handler+0x8>

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a0f      	ldr	r2, [pc, #60]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a08      	ldr	r2, [pc, #32]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e18:	d135      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4816      	ldr	r0, [pc, #88]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xd0>)
 8001e70:	f000 fa4a 	bl	8002308 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	201c      	movs	r0, #28
 8001e7a:	f000 fa0e 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e7e:	201c      	movs	r0, #28
 8001e80:	f000 fa27 	bl	80022d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e84:	e01a      	b.n	8001ebc <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM14)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_TIM_Base_MspInit+0xd4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d115      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	202d      	movs	r0, #45	@ 0x2d
 8001eb2:	f000 f9f2 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001eb6:	202d      	movs	r0, #45	@ 0x2d
 8001eb8:	f000 fa0b 	bl	80022d2 <HAL_NVIC_EnableIRQ>
}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	@ 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40002000 	.word	0x40002000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f26:	f000 f8bd 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001f32:	2004      	movs	r0, #4
 8001f34:	f000 fbb6 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f40:	2010      	movs	r0, #16
 8001f42:	f000 fbaf 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f4e:	2020      	movs	r0, #32
 8001f50:	f000 fba8 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f54:	2080      	movs	r0, #128	@ 0x80
 8001f56:	f000 fba5 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <TIM2_IRQHandler+0x10>)
 8001f66:	f001 f958 	bl	800321a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000002c 	.word	0x2000002c

08001f74 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f7a:	f001 f94e 	bl	800321a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000074 	.word	0x20000074

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fb0:	f7ff ffea 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	@ (8001fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f001 fcd5 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7ff f899 	bl	8001114 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ff0:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8001ff4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ff8:	20000134 	.word	0x20000134

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <HAL_Init+0x40>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_Init+0x40>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800201a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <HAL_Init+0x40>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f92b 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff feb8 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f943 	bl	80022ee <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002080:	f000 f90b 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	@ (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000004 	.word	0x20000004
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	20000130 	.word	0x20000130

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000130 	.word	0x20000130

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	@ (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	@ (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	@ (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	@ 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	@ 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff3e 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e16b      	b.n	80025fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 815a 	bne.w	80025f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d005      	beq.n	800235a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002356:	2b02      	cmp	r3, #2
 8002358:	d130      	bne.n	80023bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d017      	beq.n	80023f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	69b9      	ldr	r1, [r7, #24]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80b4 	beq.w	80025f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <HAL_GPIO_Init+0x30c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a5f      	ldr	r2, [pc, #380]	@ (8002614 <HAL_GPIO_Init+0x30c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b5d      	ldr	r3, [pc, #372]	@ (8002614 <HAL_GPIO_Init+0x30c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002618 <HAL_GPIO_Init+0x310>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a52      	ldr	r2, [pc, #328]	@ (800261c <HAL_GPIO_Init+0x314>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0x226>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a51      	ldr	r2, [pc, #324]	@ (8002620 <HAL_GPIO_Init+0x318>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x222>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a50      	ldr	r2, [pc, #320]	@ (8002624 <HAL_GPIO_Init+0x31c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x21e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002628 <HAL_GPIO_Init+0x320>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x21a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4e      	ldr	r2, [pc, #312]	@ (800262c <HAL_GPIO_Init+0x324>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x216>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002630 <HAL_GPIO_Init+0x328>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x212>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4c      	ldr	r2, [pc, #304]	@ (8002634 <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x20e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4b      	ldr	r2, [pc, #300]	@ (8002638 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x20a>
 800250e:	2307      	movs	r3, #7
 8002510:	e00e      	b.n	8002530 <HAL_GPIO_Init+0x228>
 8002512:	2308      	movs	r3, #8
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x228>
 8002516:	2306      	movs	r3, #6
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x228>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x228>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x228>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x228>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x228>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x228>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002540:	4935      	ldr	r1, [pc, #212]	@ (8002618 <HAL_GPIO_Init+0x310>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254e:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <HAL_GPIO_Init+0x334>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002572:	4a32      	ldr	r2, [pc, #200]	@ (800263c <HAL_GPIO_Init+0x334>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002578:	4b30      	ldr	r3, [pc, #192]	@ (800263c <HAL_GPIO_Init+0x334>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800259c:	4a27      	ldr	r2, [pc, #156]	@ (800263c <HAL_GPIO_Init+0x334>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a2:	4b26      	ldr	r3, [pc, #152]	@ (800263c <HAL_GPIO_Init+0x334>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c6:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <HAL_GPIO_Init+0x334>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_GPIO_Init+0x334>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <HAL_GPIO_Init+0x334>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f ae90 	bls.w	8002324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40013800 	.word	0x40013800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40021000 	.word	0x40021000
 8002630:	40021400 	.word	0x40021400
 8002634:	40021800 	.word	0x40021800
 8002638:	40021c00 	.word	0x40021c00
 800263c:	40013c00 	.word	0x40013c00

08002640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e001      	b.n	8002662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ba:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f866 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e267      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d075      	beq.n	80027de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026f2:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00c      	beq.n	8002718 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002706:	2b08      	cmp	r3, #8
 8002708:	d112      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4b7e      	ldr	r3, [pc, #504]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05b      	beq.n	80027dc <HAL_RCC_OscConfig+0x108>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d157      	bne.n	80027dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e242      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002738:	d106      	bne.n	8002748 <HAL_RCC_OscConfig+0x74>
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6f      	ldr	r2, [pc, #444]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 800276c:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a68      	ldr	r2, [pc, #416]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff fc9e 	bl	80020cc <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fc9a 	bl	80020cc <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e207      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xc0>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fc8a 	bl	80020cc <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff fc86 	bl	80020cc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1f3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b51      	ldr	r3, [pc, #324]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0xe8>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b44      	ldr	r3, [pc, #272]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4937      	ldr	r1, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff fc3f 	bl	80020cc <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff fc3b 	bl	80020cc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4925      	ldr	r1, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff fc1e 	bl	80020cc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff fc1a 	bl	80020cc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e187      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7ff fbfe 	bl	80020cc <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff fbfa 	bl	80020cc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e167      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x200>
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff fbe7 	bl	80020cc <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	e00e      	b.n	8002920 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7ff fbe3 	bl	80020cc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d907      	bls.n	8002920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e150      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	42470000 	.word	0x42470000
 800291c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b81      	ldr	r3, [pc, #516]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a7c      	ldr	r2, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b77      	ldr	r3, [pc, #476]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b74      	ldr	r3, [pc, #464]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a73      	ldr	r2, [pc, #460]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7ff fba3 	bl	80020cc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7ff fb9f 	bl	80020cc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e10c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x2ea>
 80029b0:	4b64      	ldr	r3, [pc, #400]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x30c>
 80029c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029e0:	4b58      	ldr	r3, [pc, #352]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a57      	ldr	r2, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a54      	ldr	r2, [pc, #336]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff fb64 	bl	80020cc <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7ff fb60 	bl	80020cc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0cb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b49      	ldr	r3, [pc, #292]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x334>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7ff fb4e 	bl	80020cc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7ff fb4a 	bl	80020cc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0b5      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a1 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d05c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d141      	bne.n	8002b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fb1e 	bl	80020cc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7ff fb1a 	bl	80020cc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e087      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7ff faf3 	bl	80020cc <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff faef 	bl	80020cc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e05c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x416>
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff fadc 	bl	80020cc <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff fad8 	bl	80020cc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e045      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e038      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cc      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b68      	ldr	r3, [pc, #416]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90c      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b65      	ldr	r3, [pc, #404]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d044      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d119      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e067      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4934      	ldr	r1, [pc, #208]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7ff fa0a 	bl	80020cc <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7ff fa06 	bl	80020cc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f96a 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	080039e8 	.word	0x080039e8
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	20000008 	.word	0x20000008

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b090      	sub	sp, #64	@ 0x40
 8002d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da8:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f200 80a1 	bhi.w	8002efc <HAL_RCC_GetSysClockFreq+0x16c>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc2:	e09b      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc8:	e09b      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b53      	ldr	r3, [pc, #332]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dce:	e098      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	623b      	str	r3, [r7, #32]
 8002df0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4b47      	ldr	r3, [pc, #284]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfc:	fb03 f201 	mul.w	r2, r3, r1
 8002e00:	2300      	movs	r3, #0
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	4a43      	ldr	r2, [pc, #268]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e10:	460a      	mov	r2, r1
 8002e12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e16:	4413      	add	r3, r2
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	61fa      	str	r2, [r7, #28]
 8002e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e2a:	f7fd f9cd 	bl	80001c8 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4613      	mov	r3, r2
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	e053      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e38:	4b35      	ldr	r3, [pc, #212]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	2200      	movs	r2, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	617a      	str	r2, [r7, #20]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e4a:	f04f 0b00 	mov.w	fp, #0
 8002e4e:	4652      	mov	r2, sl
 8002e50:	465b      	mov	r3, fp
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	ebb2 080a 	subs.w	r8, r2, sl
 8002e6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e82:	ebb2 0408 	subs.w	r4, r2, r8
 8002e86:	eb63 0509 	sbc.w	r5, r3, r9
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	00eb      	lsls	r3, r5, #3
 8002e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e98:	00e2      	lsls	r2, r4, #3
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	eb45 030b 	adc.w	r3, r5, fp
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	028b      	lsls	r3, r1, #10
 8002eba:	4621      	mov	r1, r4
 8002ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	028a      	lsls	r2, r1, #10
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	60fa      	str	r2, [r7, #12]
 8002ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed4:	f7fd f978 	bl	80001c8 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ef0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3740      	adds	r7, #64	@ 0x40
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	017d7840 	.word	0x017d7840

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe ff58 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fb3c 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e046      	b.n	8003062 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_TIM_Base_Start+0xb4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d01d      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8003074 <HAL_TIM_Base_Start+0xb8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8003078 <HAL_TIM_Base_Start+0xbc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_TIM_Base_Start+0xc0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	@ (8003080 <HAL_TIM_Base_Start+0xc4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <HAL_TIM_Base_Start+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <HAL_TIM_Base_Start+0xcc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d010      	beq.n	8003060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	e007      	b.n	8003060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40001800 	.word	0x40001800

0800308c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <HAL_TIM_Base_Stop+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_Base_Stop+0x38>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d001      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e04e      	b.n	8003192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d022      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311e:	d01d      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1e      	ldr	r2, [pc, #120]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <HAL_TIM_Base_Start_IT+0xd0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	@ (80031b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d010      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317e:	e007      	b.n	8003190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40001800 	.word	0x40001800

080031bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a1a      	ldr	r2, [r3, #32]
 80031da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <HAL_TIM_Base_Stop_IT+0x48>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_Base_Stop_IT+0x48>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01b      	beq.n	800327e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f06f 0202 	mvn.w	r2, #2
 800324e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f999 	bl	800359c <HAL_TIM_IC_CaptureCallback>
 800326a:	e005      	b.n	8003278 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f98b 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f99c 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01b      	beq.n	80032ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0204 	mvn.w	r2, #4
 800329a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f973 	bl	800359c <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f965 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f976 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01b      	beq.n	8003316 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 0208 	mvn.w	r2, #8
 80032e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2204      	movs	r2, #4
 80032ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f94d 	bl	800359c <HAL_TIM_IC_CaptureCallback>
 8003302:	e005      	b.n	8003310 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f93f 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f950 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01b      	beq.n	8003362 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f06f 0210 	mvn.w	r2, #16
 8003332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2208      	movs	r2, #8
 8003338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f927 	bl	800359c <HAL_TIM_IC_CaptureCallback>
 800334e:	e005      	b.n	800335c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f919 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f92a 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0201 	mvn.w	r2, #1
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7fe fa29 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00c      	beq.n	80033aa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fadd 	bl	8003964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8fb 	bl	80035c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0220 	mvn.w	r2, #32
 80033ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 faaf 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_TIM_ConfigClockSource+0x1c>
 8003412:	2302      	movs	r3, #2
 8003414:	e0b4      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x186>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003434:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800343c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	d03e      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xd4>
 8003450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003454:	f200 8087 	bhi.w	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345c:	f000 8086 	beq.w	800356c <HAL_TIM_ConfigClockSource+0x172>
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003464:	d87f      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 8003466:	2b70      	cmp	r3, #112	@ 0x70
 8003468:	d01a      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0xa6>
 800346a:	2b70      	cmp	r3, #112	@ 0x70
 800346c:	d87b      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	2b60      	cmp	r3, #96	@ 0x60
 8003470:	d050      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x11a>
 8003472:	2b60      	cmp	r3, #96	@ 0x60
 8003474:	d877      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 8003476:	2b50      	cmp	r3, #80	@ 0x50
 8003478:	d03c      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0xfa>
 800347a:	2b50      	cmp	r3, #80	@ 0x50
 800347c:	d873      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	d058      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0x13a>
 8003482:	2b40      	cmp	r3, #64	@ 0x40
 8003484:	d86f      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 8003486:	2b30      	cmp	r3, #48	@ 0x30
 8003488:	d064      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x15a>
 800348a:	2b30      	cmp	r3, #48	@ 0x30
 800348c:	d86b      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 800348e:	2b20      	cmp	r3, #32
 8003490:	d060      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x15a>
 8003492:	2b20      	cmp	r3, #32
 8003494:	d867      	bhi.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d05c      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x15a>
 800349a:	2b10      	cmp	r3, #16
 800349c:	d05a      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x15a>
 800349e:	e062      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b0:	f000 f9b2 	bl	8003818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
      break;
 80034cc:	e04f      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034de:	f000 f99b 	bl	8003818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f0:	609a      	str	r2, [r3, #8]
      break;
 80034f2:	e03c      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003500:	461a      	mov	r2, r3
 8003502:	f000 f90f 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2150      	movs	r1, #80	@ 0x50
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f968 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003512:	e02c      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003520:	461a      	mov	r2, r3
 8003522:	f000 f92e 	bl	8003782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2160      	movs	r1, #96	@ 0x60
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f958 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003532:	e01c      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003540:	461a      	mov	r2, r3
 8003542:	f000 f8ef 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2140      	movs	r1, #64	@ 0x40
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f948 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003552:	e00c      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f93f 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003564:	e003      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      break;
 800356a:	e000      	b.n	800356e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800356c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a43      	ldr	r2, [pc, #268]	@ (80036f8 <TIM_Base_SetConfig+0x120>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f6:	d00f      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a40      	ldr	r2, [pc, #256]	@ (80036fc <TIM_Base_SetConfig+0x124>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3f      	ldr	r2, [pc, #252]	@ (8003700 <TIM_Base_SetConfig+0x128>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3e      	ldr	r2, [pc, #248]	@ (8003704 <TIM_Base_SetConfig+0x12c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	@ (8003708 <TIM_Base_SetConfig+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a32      	ldr	r2, [pc, #200]	@ (80036f8 <TIM_Base_SetConfig+0x120>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02b      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003638:	d027      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2f      	ldr	r2, [pc, #188]	@ (80036fc <TIM_Base_SetConfig+0x124>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d023      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2e      	ldr	r2, [pc, #184]	@ (8003700 <TIM_Base_SetConfig+0x128>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <TIM_Base_SetConfig+0x12c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01b      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <TIM_Base_SetConfig+0x130>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d017      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	@ (800370c <TIM_Base_SetConfig+0x134>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <TIM_Base_SetConfig+0x138>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00f      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	@ (8003714 <TIM_Base_SetConfig+0x13c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	@ (8003718 <TIM_Base_SetConfig+0x140>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a27      	ldr	r2, [pc, #156]	@ (800371c <TIM_Base_SetConfig+0x144>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a26      	ldr	r2, [pc, #152]	@ (8003720 <TIM_Base_SetConfig+0x148>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <TIM_Base_SetConfig+0x120>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0xf2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a10      	ldr	r2, [pc, #64]	@ (8003708 <TIM_Base_SetConfig+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d103      	bne.n	80036d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800
 8003718:	40001800 	.word	0x40001800
 800371c:	40001c00 	.word	0x40001c00
 8003720:	40002000 	.word	0x40002000

08003724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 030a 	bic.w	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003782:	b480      	push	{r7}
 8003784:	b087      	sub	sp, #28
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 0210 	bic.w	r2, r3, #16
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	f043 0307 	orr.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	431a      	orrs	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e05a      	b.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a21      	ldr	r2, [pc, #132]	@ (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d01d      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a18      	ldr	r2, [pc, #96]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a15      	ldr	r2, [pc, #84]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10c      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40010400 	.word	0x40010400
 8003948:	40014000 	.word	0x40014000
 800394c:	40001800 	.word	0x40001800

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <memset>:
 8003978:	4402      	add	r2, r0
 800397a:	4603      	mov	r3, r0
 800397c:	4293      	cmp	r3, r2
 800397e:	d100      	bne.n	8003982 <memset+0xa>
 8003980:	4770      	bx	lr
 8003982:	f803 1b01 	strb.w	r1, [r3], #1
 8003986:	e7f9      	b.n	800397c <memset+0x4>

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 f818 	bl	80039d0 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08003a00 	.word	0x08003a00
 80039c4:	08003a00 	.word	0x08003a00
 80039c8:	08003a00 	.word	0x08003a00
 80039cc:	08003a04 	.word	0x08003a04

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
